import { DependencyList, EffectCallback } from 'react';

import {
  useCallbackWhen,
  useEffectWhen,
  useLayoutEffectWhen,
  useMemoWhen,
} from './useWhen';

import { MatchFunction } from './types';

/**
 * Utility predicate that returns true when the argument is defined.
 */
const isDefined: MatchFunction = (arg: unknown): boolean => arg != null;

/**
 * Shortcut for `useEffectWhen(effect, isDefined, deps)`
 * @param effect The effect function to call when all the dependencies are defined.
 * @param deps The dependency array.
 */
export function useEffectWhenDefined(
  effect: EffectCallback,
  deps: DependencyList
): void {
  useEffectWhen(effect, isDefined, deps);
}

/**
 * Shortcut for `useLayoutEffectWhen(effect, isDefined, deps)`
 * @param effect The effect function to call when all the dependencies are defined.
 * @param deps The dependency array.
 */
export function useLayoutEffectWhenDefined(
  effect: EffectCallback,
  deps: DependencyList
): void {
  useLayoutEffectWhen(effect, isDefined, deps);
}

/**
 * Shortcut for `useMemoWhen(factory, isDefined, deps)`
 * @param factory The value generating function to call when all the dependencies are defined.
 * @param deps The dependency array.
 *
 * @returns The value generated by the factory if all dependencies are defined, `undefined` otherwise.
 */
export function useMemoWhenDefined<T extends unknown>(
  factory: () => T,
  deps: DependencyList
): T | undefined {
  return useMemoWhen(factory, isDefined, deps);
}

/**
 * Shortcut for `useCallbackWhen(callback, isDefined, deps)`
 * @param callback The callback to create when all the dependencies are defined.
 * @param deps The dependency array.
 *
 * @returns The callback if all dependencies are defined, `undefined` otherwise.
 */
export function useCallbackWhenDefined<
  T extends (...args: unknown[]) => unknown
>(callback: T, deps: DependencyList): T | undefined {
  return useCallbackWhen(callback, isDefined, deps);
}
